// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$fb-name: 'fb';
$fb-x: 0px;
$fb-y: 0px;
$fb-offset-x: 0px;
$fb-offset-y: 0px;
$fb-width: 44px;
$fb-height: 44px;
$fb-total-width: 132px;
$fb-total-height: 88px;
$fb-image: '../images/sprite.png';
$fb: (0px, 0px, 0px, 0px, 44px, 44px, 132px, 88px, '../images/sprite.png', 'fb', );
$sk-name: 'sk';
$sk-x: 44px;
$sk-y: 0px;
$sk-offset-x: -44px;
$sk-offset-y: 0px;
$sk-width: 44px;
$sk-height: 44px;
$sk-total-width: 132px;
$sk-total-height: 88px;
$sk-image: '../images/sprite.png';
$sk: (44px, 0px, -44px, 0px, 44px, 44px, 132px, 88px, '../images/sprite.png', 'sk', );
$tw-name: 'tw';
$tw-x: 0px;
$tw-y: 44px;
$tw-offset-x: 0px;
$tw-offset-y: -44px;
$tw-width: 44px;
$tw-height: 44px;
$tw-total-width: 132px;
$tw-total-height: 88px;
$tw-image: '../images/sprite.png';
$tw: (0px, 44px, 0px, -44px, 44px, 44px, 132px, 88px, '../images/sprite.png', 'tw', );
$vk-name: 'vk';
$vk-x: 44px;
$vk-y: 44px;
$vk-offset-x: -44px;
$vk-offset-y: -44px;
$vk-width: 44px;
$vk-height: 44px;
$vk-total-width: 132px;
$vk-total-height: 88px;
$vk-image: '../images/sprite.png';
$vk: (44px, 44px, -44px, -44px, 44px, 44px, 132px, 88px, '../images/sprite.png', 'vk', );
$yt-name: 'yt';
$yt-x: 88px;
$yt-y: 0px;
$yt-offset-x: -88px;
$yt-offset-y: 0px;
$yt-width: 44px;
$yt-height: 44px;
$yt-total-width: 132px;
$yt-total-height: 88px;
$yt-image: '../images/sprite.png';
$yt: (88px, 0px, -88px, 0px, 44px, 44px, 132px, 88px, '../images/sprite.png', 'yt', );
$spritesheet-width: 132px;
$spritesheet-height: 88px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($fb, $sk, $tw, $vk, $yt, );
$spritesheet: (132px, 88px, '../images/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
